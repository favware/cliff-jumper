{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "name": {
      "description": "The package name to release",
      "type": "string"
    },
    "packagePath": {
      "description": "The path to the current package. For non-monorepos this is just \".\"",
      "type": "string"
    },
    "dryRun": {
      "description": "Whether the package should be bumped or not. When this is set no actions will be taken and only the release strategy will be logged",
      "type": "boolean",
      "default": false
    },
    "firstRelease": {
      "description": "Whether this is the first release (skips bumping the version)",
      "type": "boolean",
      "default": false
    },
    "monoRepo": {
      "description": "Whether the package to be bumped resides in a mono repo,\nwhich enables Lerna-like scanning for what kind of version bump should be applied\nDefaults to \"true\" when \"org\" is set, false otherwise",
      "type": "boolean",
      "default": false
    },
    "org": {
      "description": "The NPM org scope that should be used WITHOUT \"@\" sign or trailing \"/\"",
      "type": "string"
    },
    "preid": {
      "description": "The \"prerelease identifier\" to use as a prefix for the \"prerelease\" part of a semver",
      "type": "string"
    },
    "identifierBase": {
      "description": "The base number (0 or 1) to be used for the \"prerelease identifier\". Supply `false` to not use one.",
      "type": ["boolean", "string"]
    },
    "commitMessageTemplate": {
      "description": "A custom commit message template to use.\nDefaults to \"chore({{name}}): release {{full-name}}@{{new-version}}\"\n\nYou can use \"{{new-version}}\" in your template which will be dynamically replaced with whatever the new version is that will be published.\n\nYou can use \"{{name}}\" in your template, this will be replaced with the name provided through \"-n\", \"--name\" or the same value set in your config file.\n\nYou can use \"{{full-name}}\" in your template, this will be replaced \"{{name}}\" (when \"org\" is not provided), or \"@{{org}}/{{name}}\" (when \"org\" is provided).",
      "type": "string"
    },
    "tagTemplate": {
      "description": "A custom tag template to use.\n\nWhen \"org\" is provided this will default to \"@{{org}}/{{name}}@{{new-version}}\", for example \"@favware/cliff-jumper@1.0.0\"\nWhen \"org\" is not provided this will default to \"v{{new-version}}\", for example \"v1.0.0\"\n\nYou can use \"{{new-version}}\" in your template which will be dynamically replaced with whatever the new version is that will be published.\n\nYou can use \"{{org}}\" in your template, this will be replaced with the org provided through \"-o\", \"--org\" or the same value set in your config     \nfile.\n\nYou can use \"{{name}}\" in your template, this will be replaced with the name provided through \"-n\", \"--name\" or the same value set in your config  \nfile.\n\nYou can use \"{{full-name}}\" in your template, this will be replaced \"{{name}}\" (when \"org\" is not provided), or \"@{{org}}/{{name}}\" (when \"org\" is provided).",
      "type": "string"
    },
    "install": {
      "description": "Whether to run npm install after bumping the version but before committing and creating a git tag. This is useful when you have a mono repo where bumping one package would then cause the lockfile to be out of date.",
      "type": "boolean",
      "default": false
    },
    "skipChangelog": {
      "description": "Whether to skip updating your CHANGELOG.md (default `true` when CI=true, `false` otherwise)",
      "type": "boolean",
      "default": false
    },
    "skipTag": {
      "description": "Whether to skip creating a git tag (default `true` when CI=true, `false` otherwise)",
      "type": "boolean",
      "default": false
    },
    "verbose": {
      "description": "Whether to print verbose information",
      "type": "boolean",
      "default": false
    }
  },
  "required": ["name", "packagePath"]
}
